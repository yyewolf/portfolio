name: Build and Deploy Portfolio

on:
  push:
    branches:
      - main
      - master
    paths-ignore:
      - '**.md'
  workflow_dispatch:  # Allows manual triggering

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=sha,format=short
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64
          # Optimization for faster builds
          build-args: |
            NODE_ENV=production
          # Optimization for smaller images
          outputs: type=image,compression=zstd

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    # Add environment if you have specific deployment environments configured
    # environment: production
    
    steps:
      - name: Deploy to server
        # You can use various deployment methods here:
        # 1. SSH into your server and pull the latest image
        # 2. Use cloud provider-specific deployment actions
        # 3. Use a service like Coolify, Dokku, etc.
        
        # Example for SSH deployment (add your SSH private key to GitHub secrets)
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            # Pull the latest image
            docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
            
            # Stop the existing container (if running)
            docker stop portfolio-site || true
            docker rm portfolio-site || true
            
            # Run the new container
            docker run -d \
              --name portfolio-site \
              --restart unless-stopped \
              -p 80:80 \
              ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
            
            # Clean up old images
            docker image prune -af
